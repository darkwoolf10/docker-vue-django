stages:
  - lint_test_coverage
  - build-aws
  - build
  - release
  - deploy


.build-backend:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_SLUG backend/
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_SLUG
  only:
    - develop

.build-nginx:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/nginx:$CI_COMMIT_REF_SLUG -f nginx/prod/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/nginx:$CI_COMMIT_REF_SLUG
  only:
    - develop

.build-traefik:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/traefik:$CI_COMMIT_REF_SLUG -f traefik/dev/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/traefik:$CI_COMMIT_REF_SLUG
  only:
    - develop

.release-backend:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_SLUG
    - docker tag $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/backend:latest
    - docker push $CI_REGISTRY_IMAGE/backend:latest

release-nginx:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/nginx:$CI_COMMIT_REF_SLUG
    - docker tag $CI_REGISTRY_IMAGE/nginx:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/nginx:latest
    - docker push $CI_REGISTRY_IMAGE/nginx:latest

.release-traefik:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/traefik:$CI_COMMIT_REF_SLUG
    - docker tag $CI_REGISTRY_IMAGE/traefik:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/traefik:latest
    - docker push $CI_REGISTRY_IMAGE/traefik:latest

.deploy-:
  stage: deploy
  image: docker:stable
  variables:
    DOCKER_HOST: "tcp://$DROPLET_IP:2377"
    DOCKER_TLS_VERIFY: 1
  before_script:
    - mkdir -p ~/.docker
    - echo "$TLS_CA_CERT" > ~/.docker/ca.pem
    - echo "$TLS_CERT" > ~/.docker/cert.pem
    - echo "$TLS_KEY" > ~/.docker/key.pem
  script:
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - docker info
    - docker stack deploy --with-registry-auth --compose-file=docker-stack.yml verbose-equals-true-stack

deploy-ssh:
  stage: deploy
  image: docker:stable
  variables:
    DOCKER_HOST: "ssh://root@$DROPLET_IP"
  before_script:
    - 'which ssh-agent || ( apk update -y && apk add openssh-client -y )'
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts
  script:
    - docker stack deploy -c docker-stack.yml verbose-equals-true-stack

.build-ecr:
  stage: build-aws
  image: docker:latest
  variables:
    REPOSITORY_URL: "733623710918.dkr.ecr.us-east-1.amazonaws.com/verbose-equals-true"
  services:
    - docker:dind
  script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - echo "build and push images..."
    - docker build -t $REPOSITORY_URL/backend:$CI_COMMIT_SHORT_SHA backend/
    - docker build -t $REPOSITORY_URL/nginx:$CI_COMMIT_SHORT_SHA -f nginx/prod/Dockerfile .
    - docker push $REPOSITORY_URL/backend:$CI_COMMIT_SHORT_SHA
    - docker push $REPOSITORY_URL/nginx:$CI_COMMIT_SHORT_SHA

.test:
  services:
    - postgres:latest
  image: python:3.6
  stage: lint_test_coverage
  variables:
    POSTGRES_DB: "postgres"
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
    DJANGO_SETTINGS_MODULE: "backend.settings-gitlab-ci"
  script:
    - cd backend && pip install -r requirements.txt
    - flake8
    - pytest --cov


.test_unit:
  stage: lint_test_coverage
  image: node:10.14.2-jessie
  script:
    - cd frontend
    - npm install
    - npm run lint
    - npm run test:unit

.test_e2e:
  image: cypress/base:10
  stage: lint_test_coverage
  script:
    - cd frontend
    - npm install
    - apt install httping
    - npm run serve &
    - while ! httping -qc1 http://localhost:8080/login ; do sleep 1 ; done
    - $(npm bin)/cypress run
